# Execution begins at address 0
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program

# Array of 8 elements
	.align 8
array:
	.quad 0x0000000000000008
	.quad 0x0000000000000007
	.quad 0x0000000000000006
	.quad 0x0000000000000005
	.quad 0x0000000000000004
	.quad 0x0000000000000003
	.quad 0x0000000000000002
end:
	.quad 0x0000000000000001

main:
	irmovq array,%rdi
	irmovq end,%rsi
	call bubble_p
	ret

# Y86_64 do not has mul instruction, can not calculate end data address
# So set it as second parameter instead of count
# void bubble_p(long *data, long* end)
# data in %rdi, end in %rsi
bubble_p:
	irmovq $8, %r8
    jmp	L2
L4:
    mrmovq	8(%rax), %rdx   # Get *(i+1)
	mrmovq	(%rax), %rcx    # Get *i
    rrmovq  %rdx, %r11
	subq	%rcx, %r11
	jge	L3
	rmmovq	%rcx, 8(%rax)   # swap *(i+1) and *i
	rmmovq	%rdx, (%rax)
L3:
    addq	%r8, %rax
	jmp	L5
L6:
    rrmovq	%rdi, %rax
L5:
    rrmovq  %rsi, %r10
    subq    %rax, %r10
	jg	L4
	subq	%r8, %rsi
L2:
    rrmovq  %rsi, %r9    # continue if end greater than data
    subq    %rdi, %r9
	jg	L6
	ret           # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
